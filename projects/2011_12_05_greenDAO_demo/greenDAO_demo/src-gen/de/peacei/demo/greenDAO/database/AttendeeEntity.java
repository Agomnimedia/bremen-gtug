package de.peacei.demo.greenDAO.database;

import de.peacei.demo.greenDAO.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ATTENDEE_ENTITY (schema version 1).
 */
public class AttendeeEntity {

    private Long id;
    private String name;
    private String secondName;
    private Long eventId;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private AttendeeEntityDao myDao;

    private EventEntity eventEntity;
    private Long eventEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AttendeeEntity() {
    }

    public AttendeeEntity(Long id) {
        this.id = id;
    }

    public AttendeeEntity(Long id, String name, String secondName, Long eventId) {
        this.id = id;
        this.name = name;
        this.secondName = secondName;
        this.eventId = eventId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAttendeeEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSecondName() {
        return secondName;
    }

    public void setSecondName(String secondName) {
        this.secondName = secondName;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    /** To-one relationship, resolved on first access. */
    public EventEntity getEventEntity() {
        if (eventEntity__resolvedKey == null || !eventEntity__resolvedKey.equals(eventId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventEntityDao targetDao = daoSession.getEventEntityDao();
            eventEntity = targetDao.load(eventId);
            eventEntity__resolvedKey = eventId;
        }
        return eventEntity;
    }

    public void setEventEntity(EventEntity eventEntity) {
        this.eventEntity = eventEntity;
        eventId = eventEntity == null ? null : eventEntity.getId();
        eventEntity__resolvedKey = eventId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
    // method will be kept when java-file gets generated again, labeled by keep-comments
    // KEEP METHODS - put your custom methods here
    public String toString() {
    	return this.getName() + " " + this.getSecondName();
    }
    // KEEP METHODS END

}
